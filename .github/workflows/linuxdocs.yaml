name: Deploy
on:
  push:
    tags:
      - 'v*'   # 只有推送 tag 时才触发，适合发布版本
jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - uses: nixbuild/nix-quick-install-action@v33
        with:
          nix_conf: |
            keep-env-derivations = true
            keep-outputs = true
      - name: Restore and save Nix store
        uses: nix-community/cache-nix-action@v6
        with:
          # restore and save a cache using this key
          primary-key: nix-${{ runner.os }}-${{ hashFiles('**/*.nix', '**/flake.lock') }}
          # if there's no cache hit, restore a cache by this prefix
          restore-prefixes-first-match: nix-${{ runner.os }}-
          # collect garbage until the Nix store size (in bytes) is at most this number
          # before trying to save a new cache
          # 1G = 1073741824
          gc-max-store-size-linux: 3G
          # do purge caches
          purge: true
          # purge all versions of the cache
          purge-prefixes: nix-${{ runner.os }}-
          # created more than this number of seconds ago
          purge-created: 0
          # or, last accessed more than this number of seconds ago
          # relative to the start of the `Post Restore and save Nix store` phase
          purge-last-accessed: 0
          # except any version with the key that is the same as the `primary-key`
          purge-primary-key: never
      - name: build docs
        run: |
          nix develop --command bash -c "
              cmake --preset docs
              cmake --build build --target docs
          "
      - name: swith to main branch
        run: git checkout main


      - name: Deploy docs
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          command: pages deploy build/docs/html --project-name=webpageprint

      - name: deploy package
        run: |
          nix bundle
          mkdir dist
          mv "$(realpath WebpagePrinterTool-arx)" dist/WebpagePrinterTool
          wget https://github.com/zerlei/WebpagePrinterHelper/releases/download/v1.0.0/dist.zip -O /tmp/wwwroot.zip
          unzip /tmp/wwwroot.zip -d dist
          mv dist/dist dist/wwwroot
          zip -r ./WebpagePrinterTool-linux-x64.zip ./dist/*

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: WebpagePrinterTool-linux-x64.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
